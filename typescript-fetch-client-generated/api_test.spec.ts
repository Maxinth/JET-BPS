/**
 * MonieVoucher
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ApplicationApi", () => {
  let instance: api.ApplicationApi
  beforeEach(function() {
    instance = new api.ApplicationApi(config)
  });

  test("createApplication", () => {
    return expect(instance.createApplication({})).resolves.toBe(null)
  })
  test("customerApplications", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerApplications(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("getApplication", () => {
    const reference: string = "reference_example"
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.getApplication(reference, pageSize, q, {})).resolves.toBe(null)
  })
  test("getWallet", () => {
    const reference: string = "reference_example"
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.getWallet(reference, pageSize, q, {})).resolves.toBe(null)
  })
})

describe("AuthenticationCallsApi", () => {
  let instance: api.AuthenticationCallsApi
  beforeEach(function() {
    instance = new api.AuthenticationCallsApi(config)
  });

  test("login", () => {
    const body: api.Credentials = undefined
    return expect(instance.login(body, {})).resolves.toBe(null)
  })
})

describe("CustomerApi", () => {
  let instance: api.CustomerApi
  beforeEach(function() {
    instance = new api.CustomerApi(config)
  });

  test("createApplication", () => {
    return expect(instance.createApplication({})).resolves.toBe(null)
  })
  test("customerApplications", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerApplications(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerSignUp", () => {
    const body: api.Customer = undefined
    return expect(instance.customerSignUp(body, {})).resolves.toBe(null)
  })
  test("customerTransactions", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerTransactions(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchers", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerVouchers(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchersMetrics", () => {
    const customerId: number = 789
    return expect(instance.customerVouchersMetrics(customerId, {})).resolves.toBe(null)
  })
  test("customerWallet", () => {
    return expect(instance.customerWallet({})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("createApplication", () => {
    return expect(instance.createApplication({})).resolves.toBe(null)
  })
  test("customerApplications", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerApplications(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerSignUp", () => {
    const body: api.Customer = undefined
    return expect(instance.customerSignUp(body, {})).resolves.toBe(null)
  })
  test("customerTransactions", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerTransactions(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchers", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerVouchers(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchersMetrics", () => {
    const customerId: number = 789
    return expect(instance.customerVouchersMetrics(customerId, {})).resolves.toBe(null)
  })
  test("customerWallet", () => {
    return expect(instance.customerWallet({})).resolves.toBe(null)
  })
  test("getApplication", () => {
    const reference: string = "reference_example"
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.getApplication(reference, pageSize, q, {})).resolves.toBe(null)
  })
  test("getWallet", () => {
    const reference: string = "reference_example"
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.getWallet(reference, pageSize, q, {})).resolves.toBe(null)
  })
  test("login", () => {
    const body: api.Credentials = undefined
    return expect(instance.login(body, {})).resolves.toBe(null)
  })
  test("submitApplication", () => {
    const body: api.Application = undefined
    return expect(instance.submitApplication(body, {})).resolves.toBe(null)
  })
  test("subsidyTypes", () => {
    return expect(instance.subsidyTypes({})).resolves.toBe(null)
  })
})

describe("SecurityApi", () => {
  let instance: api.SecurityApi
  beforeEach(function() {
    instance = new api.SecurityApi(config)
  });

  test("customerSignUp", () => {
    const body: api.Customer = undefined
    return expect(instance.customerSignUp(body, {})).resolves.toBe(null)
  })
})

describe("TrasactionApi", () => {
  let instance: api.TrasactionApi
  beforeEach(function() {
    instance = new api.TrasactionApi(config)
  });

  test("customerTransactions", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerTransactions(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchers", () => {
    const customerId: number = 789
    const page: number = 56
    const pageSize: number = 56
    const q: string = "q_example"
    return expect(instance.customerVouchers(customerId, page, pageSize, q, {})).resolves.toBe(null)
  })
  test("customerVouchersMetrics", () => {
    const customerId: number = 789
    return expect(instance.customerVouchersMetrics(customerId, {})).resolves.toBe(null)
  })
})

describe("WalletApi", () => {
  let instance: api.WalletApi
  beforeEach(function() {
    instance = new api.WalletApi(config)
  });

  test("customerWallet", () => {
    return expect(instance.customerWallet({})).resolves.toBe(null)
  })
})

